<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LeetCode第70场双周赛复盘</title>
      <link href="/2022/01/23/LeetCode-70th-biweekly/"/>
      <url>/2022/01/23/LeetCode-70th-biweekly/</url>
      
        <content type="html"><![CDATA[<p>昨晚在力扣上参加了双周赛，成绩比预期的好，本来以为离开OI四年了估计就只能写出第一道题。我觉得我运气挺好，碰上这场题目水，突然让我重拾回信心，我觉得我可以坚持练题，把算法基本功打扎实了。</p><p>说题目水，是因为这里面好像什么也没考，只有第三道题用了个广搜，其他的都是用土方法。这就让我意识到了，刷算法题，其实就是在练习自己编程解决问题时快速找到最优方法的能力。各种具体的算法是工具，但更重要的是面对问题时灵活的思路、随机应变的能力。</p><p>这篇博客也是我在GitHub个人主页上的第一篇，想弄这个主页很久了，今天刚好以本次比赛复盘作为契机开站。今天这个开站日期也不错：1月23日。（欢呼雀跃）</p><h2 id="5971-打折购买糖果的最小开销"><a href="#5971-打折购买糖果的最小开销" class="headerlink" title="5971. 打折购买糖果的最小开销"></a>5971. 打折购买糖果的最小开销</h2><p>链接：<a href="https://leetcode-cn.com/problems/minimum-cost-of-buying-candies-with-discount/">5971. 打折购买糖果的最小开销 - 力扣（LeetCode） (leetcode-cn.com)</a></p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>一家商店正在打折销售糖果。每购买两个糖果，商店会免费送一个糖果。</p><p>免费送的糖果唯一的限制是：它的价格需要小于等于购买的两个糖果价格的较小值 。</p><p>比方说，总共有 4 个糖果，价格分别为 1 ，2 ，3 和 4 ，一位顾客买了价格为 2 和 3 的糖果，那么他可以免费获得价格为 1 的糖果，但不能获得价格为 4 的糖果。</p><p>给你一个下标从 0 开始的整数数组 cost ，其中 cost[i] 表示第 i 个糖果的价格，请你返回获得所有糖果的最小总开销。</p><p><strong>数据范围：</strong></p><ul><li><code>1 &lt;= cost.length &lt;= 100</code></li><li><code>1 &lt;= cost[i] &lt;= 100</code></li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这道题使用的是贪心策略，把第一贵和第二贵的凑对，这样就可能免费得到第三贵的，以此类推。</p><pre><code class="python">class Solution:    def minimumCost(self, cost: List[int]) -&gt; int:        cost.sort(reverse=True)        sum=0        for i in range(len(cost)):            if i%3!=2:                sum+=cost[i]        return sum</code></pre><h2 id="5972-统计隐藏数组数目"><a href="#5972-统计隐藏数组数目" class="headerlink" title="5972. 统计隐藏数组数目"></a>5972. 统计隐藏数组数目</h2><p>链接：<a href="https://leetcode-cn.com/problems/count-the-hidden-sequences/">5972. 统计隐藏数组数目 - 力扣（LeetCode） (leetcode-cn.com)</a></p><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个下标从 0 开始且长度为 n 的整数数组 differences ，它表示一个长度为 n + 1 的 隐藏 数组 相邻 元素之间的 差值 。更正式的表述为：我们将隐藏数组记作 hidden ，那么 differences[i] = hidden[i + 1] - hidden[i] 。</p><p>同时给你两个整数 lower 和 upper ，它们表示隐藏数组中所有数字的值都在 闭 区间 [lower, upper] 之间。</p><p>比方说，differences = [1, -3, 4] ，lower = 1 ，upper = 6 ，那么隐藏数组是一个长度为 4 且所有值都在 1 和 6 （包含两者）之间的数组。<br>[3, 4, 1, 5] 和 [4, 5, 2, 6] 都是符合要求的隐藏数组。<br>[5, 6, 3, 7] 不符合要求，因为它包含大于 6 的元素。<br>[1, 2, 3, 4] 不符合要求，因为相邻元素的差值不符合给定数据。<br>请你返回 符合 要求的隐藏数组的数目。如果没有符合要求的隐藏数组，请返回 0 。</p><p><strong>数据范围：</strong></p><ul><li><code>n == differences.length</code></li><li><code>1 &lt;= n &lt;= 105</code></li><li><code>-105 &lt;= differences[i] &lt;= 105</code></li><li><code>-105 &lt;= lower &lt;= upper &lt;= 105</code></li></ul><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>把差逐个累加，得到隐藏数组各项扣除首项后的数组。确定该数组的上下界，与输入要求的上下界做差加一即为答案。</p><pre><code class="python">class Solution:    def numberOfArrays(self, differences: List[int], lower: int, upper: int) -&gt; int:        a_diff = [0]        for i in range(len(differences)):            a_diff.append(a_diff[i]+differences[i])        ans = (upper-lower) - (max(a_diff)-min(a_diff)) + 1        if ans&lt;0:            return 0        else:            return ans</code></pre><h2 id="5973-价格范围内最高排名的-K-样物品"><a href="#5973-价格范围内最高排名的-K-样物品" class="headerlink" title="5973. 价格范围内最高排名的 K 样物品"></a>5973. 价格范围内最高排名的 K 样物品</h2><p>链接：<a href="https://leetcode-cn.com/problems/k-highest-ranked-items-within-a-price-range/">5973. 价格范围内最高排名的 K 样物品 - 力扣（LeetCode） (leetcode-cn.com)</a></p><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p>给你一个下标从 0 开始的二维整数数组 grid ，它的大小为 m × n ，表示一个商店中物品的分布图。数组中的整数含义为：</p><ul><li><p>0 表示无法穿越的一堵墙。</p></li><li><p>1 表示可以自由通过的一个空格子。</p></li><li><p>所有其他正整数表示该格子内的一样物品的价格。你可以自由经过这些格子。</p></li></ul><p>从一个格子走到上下左右相邻格子花费 1 步。</p><p>同时给你一个整数数组 pricing 和 start ，其中 pricing = [low, high] 且 start = [row, col] ，表示你开始位置为 (row, col) ，同时你只对物品价格在 闭区间 [low, high] 之内的物品感兴趣。同时给你一个整数 k 。</p><p>你想知道给定范围 内 且 排名最高 的 k 件物品的 位置 。排名按照优先级从高到低的以下规则制定：</p><ol><li><p>距离：定义为从 start 到一件物品的最短路径需要的步数（较近 距离的排名更高）。</p></li><li><p>价格：较低 价格的物品有更高优先级，但只考虑在给定范围之内的价格。</p></li><li><p>行坐标：较小 行坐标的有更高优先级。</p></li><li><p>列坐标：较小 列坐标的有更高优先级。</p></li></ol><p>请你返回给定价格内排名最高的 k 件物品的坐标，将它们按照排名排序后返回。如果给定价格内少于 k 件物品，那么请将它们的坐标全部返回。</p><p><strong>数据范围：</strong></p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 105</code></li><li><code>1 &lt;= m * n &lt;= 105</code></li><li><code>0 &lt;= grid[i][j] &lt;= 105</code></li><li><code>pricing.length == 2</code></li><li><code>2 &lt;= low &lt;= high &lt;= 105</code></li><li><code>start.length == 2</code></li><li><code>0 &lt;= row &lt;= m - 1</code></li><li><code>0 &lt;= col &lt;= n - 1</code></li><li><code>grid[row][col] &gt; 0</code></li><li><code>1 &lt;= k &lt;= m * n</code></li></ul><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>因为排序的优先级最高的是距离，所以马上想到的方法就是广度优先搜索（BFS）。在搜索过程中，当相同距离的所有点搜索完后，对该距离找到的点按后三条规则进行排序，加入答案。</p><p>这里学到了个排序小技巧，把排序要参考的三个数放一起加列表里，用sorted()函数就ok了。</p><p>这个代码写得太冗长了，下次努力写漂亮点quq。我这会儿突然意识到距离也可以放进sorted里一起排序，这样就不用搞个t_ans了。但是我懒得改了。</p><pre><code class="python">class Solution:    def highestRankedKItems(self, grid: List[List[int]], pricing: List[int], start: List[int], k: int) -&gt; List[List[int]]:        # 行列数        m = len(grid); n = len(grid[0])        # 标记是否搜索过        book = []        for i in range(m):            n_book = []            for j in range(n):                n_book.append(False)            book.append(n_book)        book[start[0]][start[1]]=True                directions = [[0,1],[0,-1],[1,0],[-1,0]]  # 方向        ans = []        ansk = 0        queue = [start]  # 广搜队列        dis = [0]        predis = 0        head = 0; tail = 1        # 起点也要判断        if pricing[0]&lt;=grid[start[0]][start[1]]&lt;=pricing[1]:            ans.append(start)            ansk+=1            if ansk==k:                return ans        t_ans = []  # 保存同距离的答案用于排序        while head &lt; tail:            i,j = queue[head]            if dis[head]!=predis:                t_ans = sorted(t_ans)  # 排序小技巧                for t in t_ans:                    ans.append([t[1],t[2]])                    ansk+=1                    if ansk==k:                        return ans                t_ans = []            # 对四个方向搜索            for d in directions:                ni = i+d[0]                nj = j+d[1]                # 将能拓展的点加入队列                if (0&lt;=ni&lt;m) and (0&lt;=nj&lt;n) and (grid[ni][nj]!=0) and (not book[ni][nj]):                    queue.append([ni,nj])                    dis.append(dis[head]+1)                    book[ni][nj]=True                    tail+=1                    # 将满足答案的点加入临时答案                    if pricing[0]&lt;=grid[ni][nj]&lt;=pricing[1]:                        t_ans.append([grid[ni][nj],ni,nj])            predis = dis[head]  # 用来判断下个点距离是否相同            head+=1        return ans</code></pre><h2 id="5974-分隔长廊的方案数"><a href="#5974-分隔长廊的方案数" class="headerlink" title="5974. 分隔长廊的方案数"></a>5974. 分隔长廊的方案数</h2><p>链接：<a href="https://leetcode-cn.com/problems/number-of-ways-to-divide-a-long-corridor/">5974. 分隔长廊的方案数 - 力扣（LeetCode） (leetcode-cn.com)</a></p><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><p>在一个图书馆的长廊里，有一些座位和装饰植物排成一列。给你一个下标从 0 开始，长度为 n 的字符串 corridor ，它包含字母 ‘S’ 和 ‘P’ ，其中每个 ‘S’ 表示一个座位，每个 ‘P’ 表示一株植物。</p><p>在下标 0 的左边和下标 n - 1 的右边 已经 分别各放了一个屏风。你还需要额外放置一些屏风。每一个位置 i - 1 和 i 之间（1 &lt;= i &lt;= n - 1），至多能放一个屏风。</p><p>请你将走廊用屏风划分为若干段，且每一段内都 恰好有两个座位 ，而每一段内植物的数目没有要求。可能有多种划分方案，如果两个方案中有任何一个屏风的位置不同，那么它们被视为 不同 方案。</p><p>请你返回划分走廊的方案数。由于答案可能很大，请你返回它对 109 + 7 取余 的结果。如果没有任何方案，请返回 0 。</p><p><strong>数据范围：</strong></p><ul><li><code>n == corridor.length</code></li><li><code>1 &lt;= n &lt;= 105</code></li><li><code>corridor[i]</code> 要么是 <code>&#39;S&#39;</code> ，要么是 <code>&#39;P&#39;</code> 。</li></ul><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>这道题用来压轴，并且难度设置为困难确实令人费解。思路并不复杂，遍历字符串，过程中找到两个座位后，统计到下一个座位之间的植物数np，这个位置能放屏风的方案数就是np+1，依次反复。根据乘法原理，把每个位置的方案数乘到一起就是答案。</p><pre><code class="python">class Solution:    def numberOfWays(self, corridor: str) -&gt; int:        ns = 0        np = 0        ans = 1        for i in range(len(corridor)):            if ns==2:                if corridor[i]==&quot;P&quot;:                    np+=1                elif corridor[i]==&quot;S&quot;:                    ans=(ans*(np+1))%(10**9+7)                    np=0                    ns=1            else:                if corridor[i]==&quot;S&quot;:                    ns+=1        if ns==1 or ns==0:            ans = 0        return ans</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/12/hello-world/"/>
      <url>/2022/01/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
